
cube_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000a14  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000079a  00800112  00800112  00000aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004acd  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001169  00000000  00000000  00005859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001393  00000000  00000000  000069c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00007d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001273  00000000  00000000  00008474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000205a  00000000  00000000  000096e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000b741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	48 c0       	rjmp	.+144    	; 0x92 <__ctors_end>
   2:	00 00       	nop
   4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
   6:	00 00       	nop
   8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
   a:	00 00       	nop
   c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
   e:	00 00       	nop
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
  12:	00 00       	nop
  14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
  16:	00 00       	nop
  18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
  22:	00 00       	nop
  24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
  26:	00 00       	nop
  28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c1       	rjmp	.+706    	; 0x2f8 <__vector_13>
  36:	00 00       	nop
  38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
  42:	00 00       	nop
  44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
  46:	00 00       	nop
  48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
  52:	00 00       	nop
  54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
  56:	00 00       	nop
  58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
  62:	00 00       	nop
  64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
  66:	00 00       	nop
  68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
  76:	00 00       	nop
  78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
  82:	00 00       	nop
  84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
  86:	00 00       	nop
  88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	f0 00       	.word	0x00f0	; ????
  8e:	77 01       	movw	r14, r14
  90:	6c 03       	fmul	r22, r20

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e4       	ldi	r29, 0x40	; 64
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	e4 e1       	ldi	r30, 0x14	; 20
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	00 e0       	ldi	r16, 0x00	; 0
  aa:	0b bf       	out	0x3b, r16	; 59
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x14>
  ae:	07 90       	elpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 31       	cpi	r26, 0x12	; 18
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x10>

000000b8 <__do_clear_bss>:
  b8:	28 e0       	ldi	r18, 0x08	; 8
  ba:	a2 e1       	ldi	r26, 0x12	; 18
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ac 3a       	cpi	r26, 0xAC	; 172
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>

000000c8 <__do_global_ctors>:
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	c9 e4       	ldi	r28, 0x49	; 73
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <__do_global_ctors+0xe>
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	fe 01       	movw	r30, r28
  d4:	94 d4       	rcall	.+2344   	; 0x9fe <__tablejump2__>
  d6:	c6 34       	cpi	r28, 0x46	; 70
  d8:	d1 07       	cpc	r29, r17
  da:	d1 f7       	brne	.-12     	; 0xd0 <__do_global_ctors+0x8>
  dc:	0c d1       	rcall	.+536    	; 0x2f6 <main>
  de:	98 c4       	rjmp	.+2352   	; 0xa10 <_exit>

000000e0 <__bad_interrupt>:
  e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <_ZN4Cube3offEv>:
}

cube::CubeProxy& Cube::operator()(uint8_t x, uint8_t y, uint8_t z)
{
	return m_proxy.set(x,y,z);
  e2:	2e e0       	ldi	r18, 0x0E	; 14
  e4:	36 e0       	ldi	r19, 0x06	; 6
  e6:	fc 01       	movw	r30, r24
  e8:	a9 01       	movw	r20, r18
  ea:	11 92       	st	Z+, r1
  ec:	41 50       	subi	r20, 0x01	; 1
  ee:	50 40       	sbci	r21, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <_ZN4Cube3offEv+0x8>
  f2:	fc 01       	movw	r30, r24
  f4:	8a 5c       	subi	r24, 0xCA	; 202
  f6:	9e 4f       	sbci	r25, 0xFE	; 254
  f8:	54 e0       	ldi	r21, 0x04	; 4
  fa:	43 e0       	ldi	r20, 0x03	; 3
  fc:	32 e0       	ldi	r19, 0x02	; 2
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	50 83       	st	Z, r21
 102:	df 01       	movw	r26, r30
 104:	aa 5c       	subi	r26, 0xCA	; 202
 106:	be 4f       	sbci	r27, 0xFE	; 254
 108:	4c 93       	st	X, r20
 10a:	aa 5c       	subi	r26, 0xCA	; 202
 10c:	be 4f       	sbci	r27, 0xFE	; 254
 10e:	3c 93       	st	X, r19
 110:	aa 5c       	subi	r26, 0xCA	; 202
 112:	be 4f       	sbci	r27, 0xFE	; 254
 114:	2c 93       	st	X, r18
 116:	aa 5c       	subi	r26, 0xCA	; 202
 118:	be 4f       	sbci	r27, 0xFE	; 254
 11a:	1c 92       	st	X, r1
 11c:	3a 96       	adiw	r30, 0x0a	; 10
 11e:	e8 17       	cp	r30, r24
 120:	f9 07       	cpc	r31, r25
 122:	71 f7       	brne	.-36     	; 0x100 <_ZN4Cube3offEv+0x1e>
 124:	08 95       	ret

00000126 <_ZN4CubeC1Ev>:
 126:	8f 92       	push	r8
 128:	9f 92       	push	r9
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	5c 01       	movw	r10, r24
 140:	7c 01       	movw	r14, r24
 142:	82 ef       	ldi	r24, 0xF2	; 242
 144:	e8 1a       	sub	r14, r24
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	f8 0a       	sbc	r15, r24
 14a:	65 01       	movw	r12, r10
 14c:	8b e7       	ldi	r24, 0x7B	; 123
 14e:	c8 1a       	sub	r12, r24
 150:	88 ef       	ldi	r24, 0xF8	; 248
 152:	d8 0a       	sbc	r13, r24
 154:	13 c0       	rjmp	.+38     	; 0x17c <_ZN4CubeC1Ev+0x56>
 156:	c4 01       	movw	r24, r8
 158:	47 d0       	rcall	.+142    	; 0x1e8 <_ZN3RGBC1Ev>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	88 0e       	add	r8, r24
 15e:	91 1c       	adc	r9, r1
 160:	8c 16       	cp	r8, r28
 162:	9d 06       	cpc	r9, r29
 164:	c1 f7       	brne	.-16     	; 0x156 <_ZN4CubeC1Ev+0x30>
 166:	e0 16       	cp	r14, r16
 168:	f1 06       	cpc	r15, r17
 16a:	29 f0       	breq	.+10     	; 0x176 <_ZN4CubeC1Ev+0x50>
 16c:	48 01       	movw	r8, r16
 16e:	01 5f       	subi	r16, 0xF1	; 241
 170:	1f 4f       	sbci	r17, 0xFF	; 255
 172:	e8 01       	movw	r28, r16
 174:	f0 cf       	rjmp	.-32     	; 0x156 <_ZN4CubeC1Ev+0x30>
 176:	ce 14       	cp	r12, r14
 178:	df 04       	cpc	r13, r15
 17a:	29 f0       	breq	.+10     	; 0x186 <_ZN4CubeC1Ev+0x60>
 17c:	87 01       	movw	r16, r14
 17e:	8b e4       	ldi	r24, 0x4B	; 75
 180:	e8 0e       	add	r14, r24
 182:	f1 1c       	adc	r15, r1
 184:	f3 cf       	rjmp	.-26     	; 0x16c <_ZN4CubeC1Ev+0x46>
 186:	f5 01       	movw	r30, r10
 188:	eb 57       	subi	r30, 0x7B	; 123
 18a:	f8 4f       	sbci	r31, 0xF8	; 248
 18c:	10 82       	st	Z, r1
 18e:	31 96       	adiw	r30, 0x01	; 1
 190:	10 82       	st	Z, r1
 192:	24 9a       	sbi	0x04, 4	; 4
 194:	84 b1       	in	r24, 0x04	; 4
 196:	80 6a       	ori	r24, 0xA0	; 160
 198:	84 b9       	out	0x04, r24	; 4
 19a:	8c b5       	in	r24, 0x2c	; 44
 19c:	80 65       	ori	r24, 0x50	; 80
 19e:	8c bd       	out	0x2c, r24	; 44
 1a0:	8d b5       	in	r24, 0x2d	; 45
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	8d bd       	out	0x2d, r24	; 45
 1a6:	c5 01       	movw	r24, r10
 1a8:	9c df       	rcall	.-200    	; 0xe2 <_ZN4Cube3offEv>
 1aa:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_ZN4Cube16m_to_storage_ddrE>
 1ae:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_ZN4Cube16m_to_storage_ddrE+0x1>
 1b2:	80 81       	ld	r24, Z
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	80 83       	st	Z, r24
 1b8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_ZN4Cube13m_disable_ddrE>
 1bc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_ZN4Cube13m_disable_ddrE+0x1>
 1c0:	80 81       	ld	r24, Z
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	80 83       	st	Z, r24
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	bf 90       	pop	r11
 1d8:	af 90       	pop	r10
 1da:	9f 90       	pop	r9
 1dc:	8f 90       	pop	r8
 1de:	08 95       	ret

000001e0 <_GLOBAL__sub_I__ZN4Cube10m_instanceE>:
#include "Cube.h"
#include <string.h>
Cube Cube::m_instance;
 1e0:	82 e1       	ldi	r24, 0x12	; 18
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	a0 cf       	rjmp	.-192    	; 0x126 <_ZN4CubeC1Ev>
 1e6:	08 95       	ret

000001e8 <_ZN3RGBC1Ev>:
#include "RGB.h"
#include "../util/Random.h"

const uint8_t RGB::MAX_COLOR_RGB = 32;

RGB::RGB() : r(0), g(0), b(0)
 1e8:	fc 01       	movw	r30, r24
 1ea:	10 82       	st	Z, r1
 1ec:	11 82       	std	Z+1, r1	; 0x01
 1ee:	12 82       	std	Z+2, r1	; 0x02
 1f0:	08 95       	ret

000001f2 <_ZN5InputC1Ev>:
	cli();
	val = m_enc_delta;
	m_enc_delta = val & 1;
	sei();
	return val >> 1;
 1f2:	fc 01       	movw	r30, r24
 1f4:	10 82       	st	Z, r1
 1f6:	11 82       	std	Z+1, r1	; 0x01
 1f8:	12 82       	std	Z+2, r1	; 0x02
 1fa:	13 82       	std	Z+3, r1	; 0x03
 1fc:	15 82       	std	Z+5, r1	; 0x05
 1fe:	14 82       	std	Z+4, r1	; 0x04
 200:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN5Input10BUTTON_DDRE>
 204:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN5Input10BUTTON_DDRE+0x1>
 208:	8c 91       	ld	r24, X
 20a:	83 7c       	andi	r24, 0xC3	; 195
 20c:	8c 93       	st	X, r24
 20e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_ZN5Input11BUTTON_PORTE>
 212:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_ZN5Input11BUTTON_PORTE+0x1>
 216:	8c 91       	ld	r24, X
 218:	8c 63       	ori	r24, 0x3C	; 60
 21a:	8c 93       	st	X, r24
 21c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZN5Input7INC_DDRE>
 220:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZN5Input7INC_DDRE+0x1>
 224:	8c 91       	ld	r24, X
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	8c 93       	st	X, r24
 22a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_ZN5Input8INC_PORTE>
 22e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_ZN5Input8INC_PORTE+0x1>
 232:	8c 91       	ld	r24, X
 234:	87 60       	ori	r24, 0x07	; 7
 236:	8c 93       	st	X, r24
 238:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_ZN5Input7INC_PINE>
 23c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_ZN5Input7INC_PINE+0x1>
 240:	8c 91       	ld	r24, X
 242:	81 fd       	sbrc	r24, 1
 244:	02 c0       	rjmp	.+4      	; 0x24a <_ZN5InputC1Ev+0x58>
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	01 c0       	rjmp	.+2      	; 0x24c <_ZN5InputC1Ev+0x5a>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	9c 91       	ld	r25, X
 24e:	90 fd       	sbrc	r25, 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <_ZN5InputC1Ev+0x64>
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	89 27       	eor	r24, r25
 256:	81 83       	std	Z+1, r24	; 0x01
 258:	08 95       	ret

0000025a <_ZN5Input9isPressedEv>:
 25a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <_ZN5Input7INC_PINE>
 25e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <_ZN5Input7INC_PINE+0x1>
 262:	80 81       	ld	r24, Z
 264:	82 fb       	bst	r24, 2
 266:	88 27       	eor	r24, r24
 268:	80 f9       	bld	r24, 0
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	89 27       	eor	r24, r25
 26e:	08 95       	ret

00000270 <_ZN5Input6updateEv>:
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	fc 01       	movw	r30, r24
 276:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_ZN5Input7INC_PINE>
 27a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_ZN5Input7INC_PINE+0x1>
 27e:	8c 91       	ld	r24, X
 280:	81 fd       	sbrc	r24, 1
 282:	02 c0       	rjmp	.+4      	; 0x288 <_ZN5Input6updateEv+0x18>
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	01 c0       	rjmp	.+2      	; 0x28a <_ZN5Input6updateEv+0x1a>
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	8c 91       	ld	r24, X
 28c:	80 fd       	sbrc	r24, 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <_ZN5Input6updateEv+0x24>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	98 27       	eor	r25, r24
 294:	81 81       	ldd	r24, Z+1	; 0x01
 296:	89 1b       	sub	r24, r25
 298:	80 ff       	sbrs	r24, 0
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <_ZN5Input6updateEv+0x38>
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	90 81       	ld	r25, Z
 2a0:	91 50       	subi	r25, 0x01	; 1
 2a2:	82 70       	andi	r24, 0x02	; 2
 2a4:	89 0f       	add	r24, r25
 2a6:	80 83       	st	Z, r24
 2a8:	84 81       	ldd	r24, Z+4	; 0x04
 2aa:	95 81       	ldd	r25, Z+5	; 0x05
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	95 83       	std	Z+5, r25	; 0x05
 2b0:	84 83       	std	Z+4, r24	; 0x04
 2b2:	23 81       	ldd	r18, Z+3	; 0x03
 2b4:	21 11       	cpse	r18, r1
 2b6:	18 c0       	rjmp	.+48     	; 0x2e8 <_ZN5Input6updateEv+0x78>
 2b8:	85 3f       	cpi	r24, 0xF5	; 245
 2ba:	91 40       	sbci	r25, 0x01	; 1
 2bc:	a8 f0       	brcs	.+42     	; 0x2e8 <_ZN5Input6updateEv+0x78>
 2be:	ef 01       	movw	r28, r30
 2c0:	82 81       	ldd	r24, Z+2	; 0x02
 2c2:	81 11       	cpse	r24, r1
 2c4:	0a c0       	rjmp	.+20     	; 0x2da <_ZN5Input6updateEv+0x6a>
 2c6:	cf 01       	movw	r24, r30
 2c8:	c8 df       	rcall	.-112    	; 0x25a <_ZN5Input9isPressedEv>
 2ca:	88 23       	and	r24, r24
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <_ZN5Input6updateEv+0x64>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	8a 83       	std	Y+2, r24	; 0x02
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <_ZN5Input6updateEv+0x6a>
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	88 23       	and	r24, r24
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <_ZN5Input6updateEv+0x78>
 2da:	ce 01       	movw	r24, r28
 2dc:	be df       	rcall	.-132    	; 0x25a <_ZN5Input9isPressedEv>
 2de:	81 11       	cpse	r24, r1
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <_ZN5Input6updateEv+0x78>
 2e2:	1a 82       	std	Y+2, r1	; 0x02
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	8b 83       	std	Y+3, r24	; 0x03
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <_GLOBAL__sub_I__ZN5Input10m_instanceE>:
#include "Input.h"
#include <avr/interrupt.h>

Input Input::m_instance;
 2ee:	8c e9       	ldi	r24, 0x9C	; 156
 2f0:	98 e0       	ldi	r25, 0x08	; 8
 2f2:	7f cf       	rjmp	.-258    	; 0x1f2 <_ZN5InputC1Ev>
 2f4:	08 95       	ret

000002f6 <main>:

long long millis = 0;
long long ms()
{
	return millis;
}
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <main>

000002f8 <__vector_13>:

uint8_t counter = 0;
ISR(TIMER1_COMPA_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	0b b6       	in	r0, 0x3b	; 59
 304:	0f 92       	push	r0
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
 322:	29 e0       	ldi	r18, 0x09	; 9
 324:	30 e0       	ldi	r19, 0x00	; 0
    // DISABLE_LINE_PORT |= (1 << DISABLE_LINE_PIN); //set high to disable the register
    //*m_disable_port |= (1 << m_disable_pin_no);
    //reverse shift out
    for(int8_t i = 9; i >= 0; i--)
    {
        SPI::transmit(m_colors[level][cur_color_counter][i]);
 326:	c8 e9       	ldi	r28, 0x98	; 152
 328:	d8 e0       	ldi	r29, 0x08	; 8
 32a:	a7 e9       	ldi	r26, 0x97	; 151
 32c:	b8 e0       	ldi	r27, 0x08	; 8
	SPSR  |= (1 << SPI2X);
}

inline void SPI::transmit(const unsigned char &data)
{
	SPDR = data; //data register
 32e:	46 e3       	ldi	r20, 0x36	; 54
 330:	51 e0       	ldi	r21, 0x01	; 1
 332:	88 81       	ld	r24, Y
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	6c 91       	ld	r22, X
 338:	fc 01       	movw	r30, r24
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	8e 0f       	add	r24, r30
 34c:	9f 1f       	adc	r25, r31
 34e:	64 9f       	mul	r22, r20
 350:	f0 01       	movw	r30, r0
 352:	65 9f       	mul	r22, r21
 354:	f0 0d       	add	r31, r0
 356:	11 24       	eor	r1, r1
 358:	e8 0f       	add	r30, r24
 35a:	f9 1f       	adc	r31, r25
 35c:	ee 5e       	subi	r30, 0xEE	; 238
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	e2 0f       	add	r30, r18
 362:	f3 1f       	adc	r31, r19
 364:	80 81       	ld	r24, Z
 366:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)))
 368:	0d b4       	in	r0, 0x2d	; 45
 36a:	07 fe       	sbrs	r0, 7
 36c:	fd cf       	rjmp	.-6      	; 0x368 <__vector_13+0x70>
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	31 09       	sbc	r19, r1
 372:	f8 f6       	brcc	.-66     	; 0x332 <__vector_13+0x3a>
    }

    cur_color_counter++;
 374:	80 91 98 08 	lds	r24, 0x0898	; 0x800898 <__data_end+0x786>
 378:	8f 5f       	subi	r24, 0xFF	; 255
    if(cur_color_counter >= MAX_COLOR)
 37a:	8f 31       	cpi	r24, 0x1F	; 31
 37c:	18 f4       	brcc	.+6      	; 0x384 <__vector_13+0x8c>
    for(int8_t i = 9; i >= 0; i--)
    {
        SPI::transmit(m_colors[level][cur_color_counter][i]);
    }

    cur_color_counter++;
 37e:	80 93 98 08 	sts	0x0898, r24	; 0x800898 <__data_end+0x786>
 382:	0c c0       	rjmp	.+24     	; 0x39c <__vector_13+0xa4>
    if(cur_color_counter >= MAX_COLOR)
    {
        cur_color_counter = 0;
 384:	10 92 98 08 	sts	0x0898, r1	; 0x800898 <__data_end+0x786>
        level++;
 388:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <__data_end+0x785>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
        if(level > 4)
 38e:	85 30       	cpi	r24, 0x05	; 5
 390:	18 f4       	brcc	.+6      	; 0x398 <__vector_13+0xa0>

    cur_color_counter++;
    if(cur_color_counter >= MAX_COLOR)
    {
        cur_color_counter = 0;
        level++;
 392:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <__data_end+0x785>
 396:	02 c0       	rjmp	.+4      	; 0x39c <__vector_13+0xa4>
        if(level > 4)
        {
            level = 0;
 398:	10 92 97 08 	sts	0x0897, r1	; 0x800897 <__data_end+0x785>
        }
    }

    *m_to_storage_port |= (1 << m_to_storage_pin_no); //1 clock to storage
 39c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <_ZN4Cube17m_to_storage_portE>
 3a0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <_ZN4Cube17m_to_storage_portE+0x1>
 3a4:	20 81       	ld	r18, Z
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	00 90 10 01 	lds	r0, 0x0110	; 0x800110 <_ZN4Cube19m_to_storage_pin_noE>
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <__vector_13+0xbc>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <__vector_13+0xb8>
 3b8:	92 2f       	mov	r25, r18
 3ba:	98 2b       	or	r25, r24
 3bc:	90 83       	st	Z, r25
    *m_to_storage_port &= ~(1 << m_to_storage_pin_no); //1 clock to storage
 3be:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <_ZN4Cube17m_to_storage_portE>
 3c2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <_ZN4Cube17m_to_storage_portE+0x1>
 3c6:	90 81       	ld	r25, Z
 3c8:	80 95       	com	r24
 3ca:	89 23       	and	r24, r25
 3cc:	80 83       	st	Z, r24
	Cube::getInstance().render();

	counter++;
 3ce:	90 91 a2 08 	lds	r25, 0x08A2	; 0x8008a2 <counter>
 3d2:	9f 5f       	subi	r25, 0xFF	; 255
 3d4:	90 93 a2 08 	sts	0x08A2, r25	; 0x8008a2 <counter>
	if(counter % 12 == 0) //12khz
 3d8:	8b ea       	ldi	r24, 0xAB	; 171
 3da:	98 9f       	mul	r25, r24
 3dc:	81 2d       	mov	r24, r1
 3de:	11 24       	eor	r1, r1
 3e0:	86 95       	lsr	r24
 3e2:	86 95       	lsr	r24
 3e4:	86 95       	lsr	r24
 3e6:	28 2f       	mov	r18, r24
 3e8:	22 0f       	add	r18, r18
 3ea:	82 0f       	add	r24, r18
 3ec:	88 0f       	add	r24, r24
 3ee:	88 0f       	add	r24, r24
 3f0:	98 13       	cpse	r25, r24
 3f2:	25 c0       	rjmp	.+74     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	{
		// 1khz routine here no need to clean counter
		millis++;
 3f4:	20 91 a3 08 	lds	r18, 0x08A3	; 0x8008a3 <millis>
 3f8:	30 91 a4 08 	lds	r19, 0x08A4	; 0x8008a4 <millis+0x1>
 3fc:	40 91 a5 08 	lds	r20, 0x08A5	; 0x8008a5 <millis+0x2>
 400:	50 91 a6 08 	lds	r21, 0x08A6	; 0x8008a6 <millis+0x3>
 404:	60 91 a7 08 	lds	r22, 0x08A7	; 0x8008a7 <millis+0x4>
 408:	70 91 a8 08 	lds	r23, 0x08A8	; 0x8008a8 <millis+0x5>
 40c:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <millis+0x6>
 410:	90 91 aa 08 	lds	r25, 0x08AA	; 0x8008aa <millis+0x7>
 414:	a1 e0       	ldi	r26, 0x01	; 1
 416:	e7 d2       	rcall	.+1486   	; 0x9e6 <__adddi3_s8>
 418:	20 93 a3 08 	sts	0x08A3, r18	; 0x8008a3 <millis>
 41c:	30 93 a4 08 	sts	0x08A4, r19	; 0x8008a4 <millis+0x1>
 420:	40 93 a5 08 	sts	0x08A5, r20	; 0x8008a5 <millis+0x2>
 424:	50 93 a6 08 	sts	0x08A6, r21	; 0x8008a6 <millis+0x3>
 428:	60 93 a7 08 	sts	0x08A7, r22	; 0x8008a7 <millis+0x4>
 42c:	70 93 a8 08 	sts	0x08A8, r23	; 0x8008a8 <millis+0x5>
 430:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <millis+0x6>
 434:	90 93 aa 08 	sts	0x08AA, r25	; 0x8008aa <millis+0x7>
		Input::getInstance().update();
 438:	8c e9       	ldi	r24, 0x9C	; 156
 43a:	98 e0       	ldi	r25, 0x08	; 8
 43c:	19 df       	rcall	.-462    	; 0x270 <_ZN5Input6updateEv>
	}
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0b be       	out	0x3b, r0	; 59
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <_ZN10Temperatur3getEv>:
    }
    return n;
}

double Temperatur::get()
{
 468:	cf 92       	push	r12
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	cf 93       	push	r28
 472:	df 93       	push	r29

    uint8_t temperature[2];
    int8_t digit;
    uint16_t decimal;
    double retd = 0;
    cli();
 474:	f8 94       	cli
uint8_t Temperatur::reset()
{
    uint8_t i;

    //low for 480us
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 476:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 478:	38 9a       	sbi	0x07, 0	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47a:	8e e5       	ldi	r24, 0x5E	; 94
 47c:	9a e0       	ldi	r25, 0x0A	; 10
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <_ZN10Temperatur3getEv+0x16>
    _delay_us(480);

    //release line and wait for 60uS
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 482:	38 98       	cbi	0x07, 0	; 7
 484:	eb e4       	ldi	r30, 0x4B	; 75
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <_ZN10Temperatur3getEv+0x20>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <_ZN10Temperatur3getEv+0x26>
 48e:	00 00       	nop
    _delay_us(60);

    //get value and wait 420us
    i = (DS18B20_PIN & (1 << DS18B20_DQ));
 490:	86 b1       	in	r24, 0x06	; 6
 492:	82 e1       	ldi	r24, 0x12	; 18
 494:	99 e0       	ldi	r25, 0x09	; 9
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <_ZN10Temperatur3getEv+0x2e>
 49a:	00 00       	nop
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 49c:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 49e:	38 9a       	sbi	0x07, 0	; 7
 4a0:	97 e0       	ldi	r25, 0x07	; 7
 4a2:	9a 95       	dec	r25
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <_ZN10Temperatur3getEv+0x3a>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <_ZN10Temperatur3getEv+0x40>
 4a8:	28 e0       	ldi	r18, 0x08	; 8
 4aa:	3c ec       	ldi	r19, 0xCC	; 204
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <_ZN10Temperatur3getEv+0x56>
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 4ae:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 4b0:	38 9a       	sbi	0x07, 0	; 7
 4b2:	e7 e0       	ldi	r30, 0x07	; 7
 4b4:	ea 95       	dec	r30
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <_ZN10Temperatur3getEv+0x4c>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <_ZN10Temperatur3getEv+0x52>
    _delay_us(1);

    //if we want to write 1, release the line (if not will keep low)
    if(bit)
 4ba:	80 fd       	sbrc	r24, 0
        DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 4bc:	38 98       	cbi	0x07, 0	; 7
 4be:	8b e4       	ldi	r24, 0x4B	; 75
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <_ZN10Temperatur3getEv+0x5a>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <_ZN10Temperatur3getEv+0x60>
 4c8:	00 00       	nop

    //wait 60uS and release the line
    _delay_us(60);
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 4ca:	38 98       	cbi	0x07, 0	; 7
{
    uint8_t i = 8;
    while(i--)
    {
        write_bit(byte & 1);
        byte >>= 1;
 4cc:	83 2f       	mov	r24, r19
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	95 95       	asr	r25
 4d2:	87 95       	ror	r24
 4d4:	38 2f       	mov	r19, r24
 4d6:	21 50       	subi	r18, 0x01	; 1
}

void Temperatur::write_byte(uint8_t byte)
{
    uint8_t i = 8;
    while(i--)
 4d8:	51 f7       	brne	.-44     	; 0x4ae <_ZN10Temperatur3getEv+0x46>
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 4da:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 4dc:	38 9a       	sbi	0x07, 0	; 7
 4de:	97 e0       	ldi	r25, 0x07	; 7
 4e0:	9a 95       	dec	r25
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <_ZN10Temperatur3getEv+0x78>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_ZN10Temperatur3getEv+0x7e>
 4e6:	28 e0       	ldi	r18, 0x08	; 8
 4e8:	34 e4       	ldi	r19, 0x44	; 68
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <_ZN10Temperatur3getEv+0x94>
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 4ec:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 4ee:	38 9a       	sbi	0x07, 0	; 7
 4f0:	e7 e0       	ldi	r30, 0x07	; 7
 4f2:	ea 95       	dec	r30
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <_ZN10Temperatur3getEv+0x8a>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <_ZN10Temperatur3getEv+0x90>
    _delay_us(1);

    //if we want to write 1, release the line (if not will keep low)
    if(bit)
 4f8:	80 fd       	sbrc	r24, 0
        DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 4fa:	38 98       	cbi	0x07, 0	; 7
 4fc:	8b e4       	ldi	r24, 0x4B	; 75
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <_ZN10Temperatur3getEv+0x98>
 504:	00 c0       	rjmp	.+0      	; 0x506 <_ZN10Temperatur3getEv+0x9e>
 506:	00 00       	nop

    //wait 60uS and release the line
    _delay_us(60);
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 508:	38 98       	cbi	0x07, 0	; 7
{
    uint8_t i = 8;
    while(i--)
    {
        write_bit(byte & 1);
        byte >>= 1;
 50a:	83 2f       	mov	r24, r19
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	95 95       	asr	r25
 510:	87 95       	ror	r24
 512:	38 2f       	mov	r19, r24
 514:	21 50       	subi	r18, 0x01	; 1
}

void Temperatur::write_byte(uint8_t byte)
{
    uint8_t i = 8;
    while(i--)
 516:	51 f7       	brne	.-44     	; 0x4ec <_ZN10Temperatur3getEv+0x84>
uint8_t Temperatur::read_bit()
{
    uint8_t bit = 0;

    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 518:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 51a:	38 9a       	sbi	0x07, 0	; 7
 51c:	97 e0       	ldi	r25, 0x07	; 7
 51e:	9a 95       	dec	r25
 520:	f1 f7       	brne	.-4      	; 0x51e <_ZN10Temperatur3getEv+0xb6>
 522:	00 c0       	rjmp	.+0      	; 0x524 <_ZN10Temperatur3getEv+0xbc>
    _delay_us(1);

    //release line and wait for 14uS
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 524:	38 98       	cbi	0x07, 0	; 7
 526:	e7 e6       	ldi	r30, 0x67	; 103
 528:	ea 95       	dec	r30
 52a:	f1 f7       	brne	.-4      	; 0x528 <_ZN10Temperatur3getEv+0xc0>
 52c:	00 00       	nop
    _delay_us(14);

    //read the value
    if(DS18B20_PIN & (1 << DS18B20_DQ))
 52e:	86 b1       	in	r24, 0x06	; 6
 530:	e8 ef       	ldi	r30, 0xF8	; 248
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	31 97       	sbiw	r30, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <_ZN10Temperatur3getEv+0xcc>
 538:	00 c0       	rjmp	.+0      	; 0x53a <_ZN10Temperatur3getEv+0xd2>
 53a:	00 00       	nop
    cli();
    reset(); //reset
    write_byte(DS18B20_CMD_SKIPROM); //skip ROM
    write_byte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion

    while(!read_bit()); //wait until conversion is complete
 53c:	80 ff       	sbrs	r24, 0
 53e:	ec cf       	rjmp	.-40     	; 0x518 <_ZN10Temperatur3getEv+0xb0>
uint8_t Temperatur::reset()
{
    uint8_t i;

    //low for 480us
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 540:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 542:	38 9a       	sbi	0x07, 0	; 7
 544:	8e e5       	ldi	r24, 0x5E	; 94
 546:	9a e0       	ldi	r25, 0x0A	; 10
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <_ZN10Temperatur3getEv+0xe0>
    _delay_us(480);

    //release line and wait for 60uS
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 54c:	38 98       	cbi	0x07, 0	; 7
 54e:	eb e4       	ldi	r30, 0x4B	; 75
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <_ZN10Temperatur3getEv+0xea>
 556:	00 c0       	rjmp	.+0      	; 0x558 <_ZN10Temperatur3getEv+0xf0>
 558:	00 00       	nop
    _delay_us(60);

    //get value and wait 420us
    i = (DS18B20_PIN & (1 << DS18B20_DQ));
 55a:	86 b1       	in	r24, 0x06	; 6
 55c:	82 e1       	ldi	r24, 0x12	; 18
 55e:	99 e0       	ldi	r25, 0x09	; 9
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <_ZN10Temperatur3getEv+0xf8>
 564:	00 00       	nop
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 566:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 568:	38 9a       	sbi	0x07, 0	; 7
 56a:	97 e0       	ldi	r25, 0x07	; 7
 56c:	9a 95       	dec	r25
 56e:	f1 f7       	brne	.-4      	; 0x56c <_ZN10Temperatur3getEv+0x104>
 570:	00 c0       	rjmp	.+0      	; 0x572 <_ZN10Temperatur3getEv+0x10a>
 572:	28 e0       	ldi	r18, 0x08	; 8
 574:	3c ec       	ldi	r19, 0xCC	; 204
 576:	08 c0       	rjmp	.+16     	; 0x588 <_ZN10Temperatur3getEv+0x120>
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 578:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 57a:	38 9a       	sbi	0x07, 0	; 7
 57c:	e7 e0       	ldi	r30, 0x07	; 7
 57e:	ea 95       	dec	r30
 580:	f1 f7       	brne	.-4      	; 0x57e <_ZN10Temperatur3getEv+0x116>
 582:	00 c0       	rjmp	.+0      	; 0x584 <_ZN10Temperatur3getEv+0x11c>
    _delay_us(1);

    //if we want to write 1, release the line (if not will keep low)
    if(bit)
 584:	80 fd       	sbrc	r24, 0
        DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 586:	38 98       	cbi	0x07, 0	; 7
 588:	8b e4       	ldi	r24, 0x4B	; 75
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <_ZN10Temperatur3getEv+0x124>
 590:	00 c0       	rjmp	.+0      	; 0x592 <_ZN10Temperatur3getEv+0x12a>
 592:	00 00       	nop

    //wait 60uS and release the line
    _delay_us(60);
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 594:	38 98       	cbi	0x07, 0	; 7
{
    uint8_t i = 8;
    while(i--)
    {
        write_bit(byte & 1);
        byte >>= 1;
 596:	83 2f       	mov	r24, r19
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	95 95       	asr	r25
 59c:	87 95       	ror	r24
 59e:	38 2f       	mov	r19, r24
 5a0:	21 50       	subi	r18, 0x01	; 1
}

void Temperatur::write_byte(uint8_t byte)
{
    uint8_t i = 8;
    while(i--)
 5a2:	51 f7       	brne	.-44     	; 0x578 <_ZN10Temperatur3getEv+0x110>
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 5a4:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 5a6:	38 9a       	sbi	0x07, 0	; 7
 5a8:	97 e0       	ldi	r25, 0x07	; 7
 5aa:	9a 95       	dec	r25
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <_ZN10Temperatur3getEv+0x142>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <_ZN10Temperatur3getEv+0x148>
 5b0:	28 e0       	ldi	r18, 0x08	; 8
 5b2:	3e eb       	ldi	r19, 0xBE	; 190
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <_ZN10Temperatur3getEv+0x15e>
}

void Temperatur::write_bit(uint8_t bit)
{
    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 5b6:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 5b8:	38 9a       	sbi	0x07, 0	; 7
 5ba:	e7 e0       	ldi	r30, 0x07	; 7
 5bc:	ea 95       	dec	r30
 5be:	f1 f7       	brne	.-4      	; 0x5bc <_ZN10Temperatur3getEv+0x154>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <_ZN10Temperatur3getEv+0x15a>
    _delay_us(1);

    //if we want to write 1, release the line (if not will keep low)
    if(bit)
 5c2:	80 fd       	sbrc	r24, 0
        DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 5c4:	38 98       	cbi	0x07, 0	; 7
 5c6:	8b e4       	ldi	r24, 0x4B	; 75
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <_ZN10Temperatur3getEv+0x162>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <_ZN10Temperatur3getEv+0x168>
 5d0:	00 00       	nop

    //wait 60uS and release the line
    _delay_us(60);
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 5d2:	38 98       	cbi	0x07, 0	; 7
{
    uint8_t i = 8;
    while(i--)
    {
        write_bit(byte & 1);
        byte >>= 1;
 5d4:	83 2f       	mov	r24, r19
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	95 95       	asr	r25
 5da:	87 95       	ror	r24
 5dc:	38 2f       	mov	r19, r24
 5de:	21 50       	subi	r18, 0x01	; 1
}

void Temperatur::write_byte(uint8_t byte)
{
    uint8_t i = 8;
    while(i--)
 5e0:	51 f7       	brne	.-44     	; 0x5b6 <_ZN10Temperatur3getEv+0x14e>
 5e2:	98 e0       	ldi	r25, 0x08	; 8
 5e4:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t Temperatur::read_bit()
{
    uint8_t bit = 0;

    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 5e6:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 5e8:	38 9a       	sbi	0x07, 0	; 7
 5ea:	e7 e0       	ldi	r30, 0x07	; 7
 5ec:	ea 95       	dec	r30
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <_ZN10Temperatur3getEv+0x184>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_ZN10Temperatur3getEv+0x18a>
    _delay_us(1);

    //release line and wait for 14uS
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 5f2:	38 98       	cbi	0x07, 0	; 7
 5f4:	f7 e6       	ldi	r31, 0x67	; 103
 5f6:	fa 95       	dec	r31
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <_ZN10Temperatur3getEv+0x18e>
 5fa:	00 00       	nop
    _delay_us(14);

    //read the value
    if(DS18B20_PIN & (1 << DS18B20_DQ))
 5fc:	86 b1       	in	r24, 0x06	; 6
 5fe:	e8 ef       	ldi	r30, 0xF8	; 248
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <_ZN10Temperatur3getEv+0x19a>
 606:	00 c0       	rjmp	.+0      	; 0x608 <_ZN10Temperatur3getEv+0x1a0>
 608:	00 00       	nop
{
    uint8_t i = 8, n = 0;
    while(i--)
    {
        n >>= 1;
        n |= (read_bit() << 7);
 60a:	87 95       	ror	r24
 60c:	88 27       	eor	r24, r24
 60e:	87 95       	ror	r24
 610:	c6 95       	lsr	r28
 612:	c8 2b       	or	r28, r24
 614:	91 50       	subi	r25, 0x01	; 1
}

uint8_t Temperatur::read_byte()
{
    uint8_t i = 8, n = 0;
    while(i--)
 616:	39 f7       	brne	.-50     	; 0x5e6 <_ZN10Temperatur3getEv+0x17e>
 618:	28 e0       	ldi	r18, 0x08	; 8
    return bit;
}

uint8_t Temperatur::read_byte()
{
    uint8_t i = 8, n = 0;
 61a:	80 e0       	ldi	r24, 0x00	; 0
uint8_t Temperatur::read_bit()
{
    uint8_t bit = 0;

    //low for 1uS
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 61c:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 61e:	38 9a       	sbi	0x07, 0	; 7
 620:	f7 e0       	ldi	r31, 0x07	; 7
 622:	fa 95       	dec	r31
 624:	f1 f7       	brne	.-4      	; 0x622 <_ZN10Temperatur3getEv+0x1ba>
 626:	00 c0       	rjmp	.+0      	; 0x628 <_ZN10Temperatur3getEv+0x1c0>
    _delay_us(1);

    //release line and wait for 14uS
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 628:	38 98       	cbi	0x07, 0	; 7
 62a:	47 e6       	ldi	r20, 0x67	; 103
 62c:	4a 95       	dec	r20
 62e:	f1 f7       	brne	.-4      	; 0x62c <_ZN10Temperatur3getEv+0x1c4>
 630:	00 00       	nop
    _delay_us(14);

    //read the value
    if(DS18B20_PIN & (1 << DS18B20_DQ))
 632:	96 b1       	in	r25, 0x06	; 6
 634:	e8 ef       	ldi	r30, 0xF8	; 248
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <_ZN10Temperatur3getEv+0x1d0>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <_ZN10Temperatur3getEv+0x1d6>
 63e:	00 00       	nop
{
    uint8_t i = 8, n = 0;
    while(i--)
    {
        n >>= 1;
        n |= (read_bit() << 7);
 640:	97 95       	ror	r25
 642:	99 27       	eor	r25, r25
 644:	97 95       	ror	r25
 646:	86 95       	lsr	r24
 648:	89 2b       	or	r24, r25
 64a:	21 50       	subi	r18, 0x01	; 1
}

uint8_t Temperatur::read_byte()
{
    uint8_t i = 8, n = 0;
    while(i--)
 64c:	39 f7       	brne	.-50     	; 0x61c <_ZN10Temperatur3getEv+0x1b4>
uint8_t Temperatur::reset()
{
    uint8_t i;

    //low for 480us
    DS18B20_PORT &= ~ (1 << DS18B20_DQ); //low
 64e:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1 << DS18B20_DQ); //output
 650:	38 9a       	sbi	0x07, 0	; 7
 652:	ee e5       	ldi	r30, 0x5E	; 94
 654:	fa e0       	ldi	r31, 0x0A	; 10
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <_ZN10Temperatur3getEv+0x1ee>
    _delay_us(480);

    //release line and wait for 60uS
    DS18B20_DDR &= ~(1 << DS18B20_DQ); //input
 65a:	38 98       	cbi	0x07, 0	; 7
 65c:	eb e4       	ldi	r30, 0x4B	; 75
 65e:	f1 e0       	ldi	r31, 0x01	; 1
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <_ZN10Temperatur3getEv+0x1f8>
 664:	00 c0       	rjmp	.+0      	; 0x666 <_ZN10Temperatur3getEv+0x1fe>
 666:	00 00       	nop
    _delay_us(60);

    //get value and wait 420us
    i = (DS18B20_PIN & (1 << DS18B20_DQ));
 668:	96 b1       	in	r25, 0x06	; 6
 66a:	e2 e1       	ldi	r30, 0x12	; 18
 66c:	f9 e0       	ldi	r31, 0x09	; 9
 66e:	31 97       	sbiw	r30, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <_ZN10Temperatur3getEv+0x206>
 672:	00 00       	nop
    //read 2 byte from scratchpad
    temperature[0] = read_byte();
    temperature[1] = read_byte();

    reset(); //reset
    sei();
 674:	78 94       	sei
    //store temperature integer digits
    digit = temperature[0] >> 4;
 676:	6c 2f       	mov	r22, r28
 678:	62 95       	swap	r22
 67a:	6f 70       	andi	r22, 0x0F	; 15
    digit |= (temperature[1] & 0x7) << 4;

    //store temperature decimal digits
    decimal = temperature[0] & 0xf;
 67c:	cf 70       	andi	r28, 0x0F	; 15
 67e:	d0 e0       	ldi	r29, 0x00	; 0

    reset(); //reset
    sei();
    //store temperature integer digits
    digit = temperature[0] >> 4;
    digit |= (temperature[1] & 0x7) << 4;
 680:	87 70       	andi	r24, 0x07	; 7
 682:	f0 e1       	ldi	r31, 0x10	; 16
 684:	8f 9f       	mul	r24, r31
 686:	c0 01       	movw	r24, r0
 688:	11 24       	eor	r1, r1
 68a:	68 2b       	or	r22, r24
    //store temperature decimal digits
    decimal = temperature[0] & 0xf;
    decimal *= DS18B20_DECIMALSTEPS;

    //compose the double temperature value and return it
    retd = digit + decimal * 0.0001;
 68c:	06 2e       	mov	r0, r22
 68e:	00 0c       	add	r0, r0
 690:	77 0b       	sbc	r23, r23
 692:	88 0b       	sbc	r24, r24
 694:	99 0b       	sbc	r25, r25
 696:	b8 d0       	rcall	.+368    	; 0x808 <__floatsisf>
 698:	6b 01       	movw	r12, r22
 69a:	7c 01       	movw	r14, r24
    digit = temperature[0] >> 4;
    digit |= (temperature[1] & 0x7) << 4;

    //store temperature decimal digits
    decimal = temperature[0] & 0xf;
    decimal *= DS18B20_DECIMALSTEPS;
 69c:	21 e7       	ldi	r18, 0x71	; 113
 69e:	32 e0       	ldi	r19, 0x02	; 2
 6a0:	c2 9f       	mul	r28, r18
 6a2:	c0 01       	movw	r24, r0
 6a4:	c3 9f       	mul	r28, r19
 6a6:	90 0d       	add	r25, r0
 6a8:	d2 9f       	mul	r29, r18
 6aa:	90 0d       	add	r25, r0
 6ac:	11 24       	eor	r1, r1

    //compose the double temperature value and return it
    retd = digit + decimal * 0.0001;
 6ae:	bc 01       	movw	r22, r24
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	a7 d0       	rcall	.+334    	; 0x804 <__floatunsisf>
 6b6:	27 e1       	ldi	r18, 0x17	; 23
 6b8:	37 eb       	ldi	r19, 0xB7	; 183
 6ba:	41 ed       	ldi	r20, 0xD1	; 209
 6bc:	58 e3       	ldi	r21, 0x38	; 56
 6be:	30 d1       	rcall	.+608    	; 0x920 <__mulsf3>
 6c0:	9b 01       	movw	r18, r22
 6c2:	ac 01       	movw	r20, r24
 6c4:	c7 01       	movw	r24, r14
 6c6:	b6 01       	movw	r22, r12
 6c8:	0d d0       	rcall	.+26     	; 0x6e4 <__addsf3>

    return retd;
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	08 95       	ret

000006d8 <_GLOBAL__sub_I__ZN6Random2y8E>:
#include "../sensors/Temperatur.h"
using namespace Random;

namespace Random
{
    uint8_t y8 = Temperatur::get();
 6d8:	c7 de       	rcall	.-626    	; 0x468 <_ZN10Temperatur3getEv>
 6da:	68 d0       	rcall	.+208    	; 0x7ac <__fixunssfsi>
 6dc:	60 93 ab 08 	sts	0x08AB, r22	; 0x8008ab <_ZN6Random2y8E>
 6e0:	08 95       	ret

000006e2 <__subsf3>:
 6e2:	50 58       	subi	r21, 0x80	; 128

000006e4 <__addsf3>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	0e d0       	rcall	.+28     	; 0x706 <__addsf3x>
 6ea:	e0 c0       	rjmp	.+448    	; 0x8ac <__fp_round>
 6ec:	d1 d0       	rcall	.+418    	; 0x890 <__fp_pscA>
 6ee:	30 f0       	brcs	.+12     	; 0x6fc <__addsf3+0x18>
 6f0:	d6 d0       	rcall	.+428    	; 0x89e <__fp_pscB>
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__addsf3+0x18>
 6f4:	31 f4       	brne	.+12     	; 0x702 <__addsf3+0x1e>
 6f6:	9f 3f       	cpi	r25, 0xFF	; 255
 6f8:	11 f4       	brne	.+4      	; 0x6fe <__addsf3+0x1a>
 6fa:	1e f4       	brtc	.+6      	; 0x702 <__addsf3+0x1e>
 6fc:	c6 c0       	rjmp	.+396    	; 0x88a <__fp_nan>
 6fe:	0e f4       	brtc	.+2      	; 0x702 <__addsf3+0x1e>
 700:	e0 95       	com	r30
 702:	e7 fb       	bst	r30, 7
 704:	bc c0       	rjmp	.+376    	; 0x87e <__fp_inf>

00000706 <__addsf3x>:
 706:	e9 2f       	mov	r30, r25
 708:	e2 d0       	rcall	.+452    	; 0x8ce <__fp_split3>
 70a:	80 f3       	brcs	.-32     	; 0x6ec <__addsf3+0x8>
 70c:	ba 17       	cp	r27, r26
 70e:	62 07       	cpc	r22, r18
 710:	73 07       	cpc	r23, r19
 712:	84 07       	cpc	r24, r20
 714:	95 07       	cpc	r25, r21
 716:	18 f0       	brcs	.+6      	; 0x71e <__addsf3x+0x18>
 718:	71 f4       	brne	.+28     	; 0x736 <__addsf3x+0x30>
 71a:	9e f5       	brtc	.+102    	; 0x782 <__addsf3x+0x7c>
 71c:	fa c0       	rjmp	.+500    	; 0x912 <__fp_zero>
 71e:	0e f4       	brtc	.+2      	; 0x722 <__addsf3x+0x1c>
 720:	e0 95       	com	r30
 722:	0b 2e       	mov	r0, r27
 724:	ba 2f       	mov	r27, r26
 726:	a0 2d       	mov	r26, r0
 728:	0b 01       	movw	r0, r22
 72a:	b9 01       	movw	r22, r18
 72c:	90 01       	movw	r18, r0
 72e:	0c 01       	movw	r0, r24
 730:	ca 01       	movw	r24, r20
 732:	a0 01       	movw	r20, r0
 734:	11 24       	eor	r1, r1
 736:	ff 27       	eor	r31, r31
 738:	59 1b       	sub	r21, r25
 73a:	99 f0       	breq	.+38     	; 0x762 <__addsf3x+0x5c>
 73c:	59 3f       	cpi	r21, 0xF9	; 249
 73e:	50 f4       	brcc	.+20     	; 0x754 <__addsf3x+0x4e>
 740:	50 3e       	cpi	r21, 0xE0	; 224
 742:	68 f1       	brcs	.+90     	; 0x79e <__addsf3x+0x98>
 744:	1a 16       	cp	r1, r26
 746:	f0 40       	sbci	r31, 0x00	; 0
 748:	a2 2f       	mov	r26, r18
 74a:	23 2f       	mov	r18, r19
 74c:	34 2f       	mov	r19, r20
 74e:	44 27       	eor	r20, r20
 750:	58 5f       	subi	r21, 0xF8	; 248
 752:	f3 cf       	rjmp	.-26     	; 0x73a <__addsf3x+0x34>
 754:	46 95       	lsr	r20
 756:	37 95       	ror	r19
 758:	27 95       	ror	r18
 75a:	a7 95       	ror	r26
 75c:	f0 40       	sbci	r31, 0x00	; 0
 75e:	53 95       	inc	r21
 760:	c9 f7       	brne	.-14     	; 0x754 <__addsf3x+0x4e>
 762:	7e f4       	brtc	.+30     	; 0x782 <__addsf3x+0x7c>
 764:	1f 16       	cp	r1, r31
 766:	ba 0b       	sbc	r27, r26
 768:	62 0b       	sbc	r22, r18
 76a:	73 0b       	sbc	r23, r19
 76c:	84 0b       	sbc	r24, r20
 76e:	ba f0       	brmi	.+46     	; 0x79e <__addsf3x+0x98>
 770:	91 50       	subi	r25, 0x01	; 1
 772:	a1 f0       	breq	.+40     	; 0x79c <__addsf3x+0x96>
 774:	ff 0f       	add	r31, r31
 776:	bb 1f       	adc	r27, r27
 778:	66 1f       	adc	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	c2 f7       	brpl	.-16     	; 0x770 <__addsf3x+0x6a>
 780:	0e c0       	rjmp	.+28     	; 0x79e <__addsf3x+0x98>
 782:	ba 0f       	add	r27, r26
 784:	62 1f       	adc	r22, r18
 786:	73 1f       	adc	r23, r19
 788:	84 1f       	adc	r24, r20
 78a:	48 f4       	brcc	.+18     	; 0x79e <__addsf3x+0x98>
 78c:	87 95       	ror	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9e 3f       	cpi	r25, 0xFE	; 254
 798:	08 f0       	brcs	.+2      	; 0x79c <__addsf3x+0x96>
 79a:	b3 cf       	rjmp	.-154    	; 0x702 <__addsf3+0x1e>
 79c:	93 95       	inc	r25
 79e:	88 0f       	add	r24, r24
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__addsf3x+0x9e>
 7a2:	99 27       	eor	r25, r25
 7a4:	ee 0f       	add	r30, r30
 7a6:	97 95       	ror	r25
 7a8:	87 95       	ror	r24
 7aa:	08 95       	ret

000007ac <__fixunssfsi>:
 7ac:	98 d0       	rcall	.+304    	; 0x8de <__fp_splitA>
 7ae:	88 f0       	brcs	.+34     	; 0x7d2 <__fixunssfsi+0x26>
 7b0:	9f 57       	subi	r25, 0x7F	; 127
 7b2:	90 f0       	brcs	.+36     	; 0x7d8 <__fixunssfsi+0x2c>
 7b4:	b9 2f       	mov	r27, r25
 7b6:	99 27       	eor	r25, r25
 7b8:	b7 51       	subi	r27, 0x17	; 23
 7ba:	a0 f0       	brcs	.+40     	; 0x7e4 <__fixunssfsi+0x38>
 7bc:	d1 f0       	breq	.+52     	; 0x7f2 <__fixunssfsi+0x46>
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	1a f0       	brmi	.+6      	; 0x7ce <__fixunssfsi+0x22>
 7c8:	ba 95       	dec	r27
 7ca:	c9 f7       	brne	.-14     	; 0x7be <__fixunssfsi+0x12>
 7cc:	12 c0       	rjmp	.+36     	; 0x7f2 <__fixunssfsi+0x46>
 7ce:	b1 30       	cpi	r27, 0x01	; 1
 7d0:	81 f0       	breq	.+32     	; 0x7f2 <__fixunssfsi+0x46>
 7d2:	9f d0       	rcall	.+318    	; 0x912 <__fp_zero>
 7d4:	b1 e0       	ldi	r27, 0x01	; 1
 7d6:	08 95       	ret
 7d8:	9c c0       	rjmp	.+312    	; 0x912 <__fp_zero>
 7da:	67 2f       	mov	r22, r23
 7dc:	78 2f       	mov	r23, r24
 7de:	88 27       	eor	r24, r24
 7e0:	b8 5f       	subi	r27, 0xF8	; 248
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__fixunssfsi+0x46>
 7e4:	b9 3f       	cpi	r27, 0xF9	; 249
 7e6:	cc f3       	brlt	.-14     	; 0x7da <__fixunssfsi+0x2e>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b3 95       	inc	r27
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__fixunssfsi+0x3c>
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__fixunssfsi+0x56>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__floatsisf+0x6c>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__floatsisf+0x6c>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__floatsisf+0x6c>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__floatsisf+0x6a>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__floatsisf+0x5e>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__floatsisf+0x74>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__floatsisf+0x6c>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__floatsisf+0x62>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_inf>:
 87e:	97 f9       	bld	r25, 7
 880:	9f 67       	ori	r25, 0x7F	; 127
 882:	80 e8       	ldi	r24, 0x80	; 128
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	08 95       	ret

0000088a <__fp_nan>:
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	80 ec       	ldi	r24, 0xC0	; 192
 88e:	08 95       	ret

00000890 <__fp_pscA>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	09 06       	cpc	r0, r25
 89c:	08 95       	ret

0000089e <__fp_pscB>:
 89e:	00 24       	eor	r0, r0
 8a0:	0a 94       	dec	r0
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	05 06       	cpc	r0, r21
 8aa:	08 95       	ret

000008ac <__fp_round>:
 8ac:	09 2e       	mov	r0, r25
 8ae:	03 94       	inc	r0
 8b0:	00 0c       	add	r0, r0
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_round+0xc>
 8b4:	88 23       	and	r24, r24
 8b6:	52 f0       	brmi	.+20     	; 0x8cc <__fp_round+0x20>
 8b8:	bb 0f       	add	r27, r27
 8ba:	40 f4       	brcc	.+16     	; 0x8cc <__fp_round+0x20>
 8bc:	bf 2b       	or	r27, r31
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0x18>
 8c0:	60 ff       	sbrs	r22, 0
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__fp_round+0x20>
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__fp_split3>:
 8ce:	57 fd       	sbrc	r21, 7
 8d0:	90 58       	subi	r25, 0x80	; 128
 8d2:	44 0f       	add	r20, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	59 f0       	breq	.+22     	; 0x8ee <__fp_splitA+0x10>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	71 f0       	breq	.+28     	; 0x8f8 <__fp_splitA+0x1a>
 8dc:	47 95       	ror	r20

000008de <__fp_splitA>:
 8de:	88 0f       	add	r24, r24
 8e0:	97 fb       	bst	r25, 7
 8e2:	99 1f       	adc	r25, r25
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_splitA+0x20>
 8e6:	9f 3f       	cpi	r25, 0xFF	; 255
 8e8:	79 f0       	breq	.+30     	; 0x908 <__fp_splitA+0x2a>
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <__fp_split3+0xe>
 8f8:	46 95       	lsr	r20
 8fa:	f1 df       	rcall	.-30     	; 0x8de <__fp_splitA>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__fp_splitA+0x30>
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	18 06       	cpc	r1, r24
 904:	99 1f       	adc	r25, r25
 906:	f1 cf       	rjmp	.-30     	; 0x8ea <__fp_splitA+0xc>
 908:	86 95       	lsr	r24
 90a:	71 05       	cpc	r23, r1
 90c:	61 05       	cpc	r22, r1
 90e:	08 94       	sec
 910:	08 95       	ret

00000912 <__fp_zero>:
 912:	e8 94       	clt

00000914 <__fp_szero>:
 914:	bb 27       	eor	r27, r27
 916:	66 27       	eor	r22, r22
 918:	77 27       	eor	r23, r23
 91a:	cb 01       	movw	r24, r22
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__mulsf3>:
 920:	0b d0       	rcall	.+22     	; 0x938 <__mulsf3x>
 922:	c4 cf       	rjmp	.-120    	; 0x8ac <__fp_round>
 924:	b5 df       	rcall	.-150    	; 0x890 <__fp_pscA>
 926:	28 f0       	brcs	.+10     	; 0x932 <__mulsf3+0x12>
 928:	ba df       	rcall	.-140    	; 0x89e <__fp_pscB>
 92a:	18 f0       	brcs	.+6      	; 0x932 <__mulsf3+0x12>
 92c:	95 23       	and	r25, r21
 92e:	09 f0       	breq	.+2      	; 0x932 <__mulsf3+0x12>
 930:	a6 cf       	rjmp	.-180    	; 0x87e <__fp_inf>
 932:	ab cf       	rjmp	.-170    	; 0x88a <__fp_nan>
 934:	11 24       	eor	r1, r1
 936:	ee cf       	rjmp	.-36     	; 0x914 <__fp_szero>

00000938 <__mulsf3x>:
 938:	ca df       	rcall	.-108    	; 0x8ce <__fp_split3>
 93a:	a0 f3       	brcs	.-24     	; 0x924 <__mulsf3+0x4>

0000093c <__mulsf3_pse>:
 93c:	95 9f       	mul	r25, r21
 93e:	d1 f3       	breq	.-12     	; 0x934 <__mulsf3+0x14>
 940:	95 0f       	add	r25, r21
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	55 1f       	adc	r21, r21
 946:	62 9f       	mul	r22, r18
 948:	f0 01       	movw	r30, r0
 94a:	72 9f       	mul	r23, r18
 94c:	bb 27       	eor	r27, r27
 94e:	f0 0d       	add	r31, r0
 950:	b1 1d       	adc	r27, r1
 952:	63 9f       	mul	r22, r19
 954:	aa 27       	eor	r26, r26
 956:	f0 0d       	add	r31, r0
 958:	b1 1d       	adc	r27, r1
 95a:	aa 1f       	adc	r26, r26
 95c:	64 9f       	mul	r22, r20
 95e:	66 27       	eor	r22, r22
 960:	b0 0d       	add	r27, r0
 962:	a1 1d       	adc	r26, r1
 964:	66 1f       	adc	r22, r22
 966:	82 9f       	mul	r24, r18
 968:	22 27       	eor	r18, r18
 96a:	b0 0d       	add	r27, r0
 96c:	a1 1d       	adc	r26, r1
 96e:	62 1f       	adc	r22, r18
 970:	73 9f       	mul	r23, r19
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	62 1f       	adc	r22, r18
 978:	83 9f       	mul	r24, r19
 97a:	a0 0d       	add	r26, r0
 97c:	61 1d       	adc	r22, r1
 97e:	22 1f       	adc	r18, r18
 980:	74 9f       	mul	r23, r20
 982:	33 27       	eor	r19, r19
 984:	a0 0d       	add	r26, r0
 986:	61 1d       	adc	r22, r1
 988:	23 1f       	adc	r18, r19
 98a:	84 9f       	mul	r24, r20
 98c:	60 0d       	add	r22, r0
 98e:	21 1d       	adc	r18, r1
 990:	82 2f       	mov	r24, r18
 992:	76 2f       	mov	r23, r22
 994:	6a 2f       	mov	r22, r26
 996:	11 24       	eor	r1, r1
 998:	9f 57       	subi	r25, 0x7F	; 127
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	8a f0       	brmi	.+34     	; 0x9c0 <__mulsf3_pse+0x84>
 99e:	e1 f0       	breq	.+56     	; 0x9d8 <__mulsf3_pse+0x9c>
 9a0:	88 23       	and	r24, r24
 9a2:	4a f0       	brmi	.+18     	; 0x9b6 <__mulsf3_pse+0x7a>
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	bb 1f       	adc	r27, r27
 9aa:	66 1f       	adc	r22, r22
 9ac:	77 1f       	adc	r23, r23
 9ae:	88 1f       	adc	r24, r24
 9b0:	91 50       	subi	r25, 0x01	; 1
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	a9 f7       	brne	.-22     	; 0x9a0 <__mulsf3_pse+0x64>
 9b6:	9e 3f       	cpi	r25, 0xFE	; 254
 9b8:	51 05       	cpc	r21, r1
 9ba:	70 f0       	brcs	.+28     	; 0x9d8 <__mulsf3_pse+0x9c>
 9bc:	60 cf       	rjmp	.-320    	; 0x87e <__fp_inf>
 9be:	aa cf       	rjmp	.-172    	; 0x914 <__fp_szero>
 9c0:	5f 3f       	cpi	r21, 0xFF	; 255
 9c2:	ec f3       	brlt	.-6      	; 0x9be <__mulsf3_pse+0x82>
 9c4:	98 3e       	cpi	r25, 0xE8	; 232
 9c6:	dc f3       	brlt	.-10     	; 0x9be <__mulsf3_pse+0x82>
 9c8:	86 95       	lsr	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f7 95       	ror	r31
 9d2:	e7 95       	ror	r30
 9d4:	9f 5f       	subi	r25, 0xFF	; 255
 9d6:	c1 f7       	brne	.-16     	; 0x9c8 <__mulsf3_pse+0x8c>
 9d8:	fe 2b       	or	r31, r30
 9da:	88 0f       	add	r24, r24
 9dc:	91 1d       	adc	r25, r1
 9de:	96 95       	lsr	r25
 9e0:	87 95       	ror	r24
 9e2:	97 f9       	bld	r25, 7
 9e4:	08 95       	ret

000009e6 <__adddi3_s8>:
 9e6:	00 24       	eor	r0, r0
 9e8:	a7 fd       	sbrc	r26, 7
 9ea:	00 94       	com	r0
 9ec:	2a 0f       	add	r18, r26
 9ee:	30 1d       	adc	r19, r0
 9f0:	40 1d       	adc	r20, r0
 9f2:	50 1d       	adc	r21, r0
 9f4:	60 1d       	adc	r22, r0
 9f6:	70 1d       	adc	r23, r0
 9f8:	80 1d       	adc	r24, r0
 9fa:	90 1d       	adc	r25, r0
 9fc:	08 95       	ret

000009fe <__tablejump2__>:
 9fe:	ee 0f       	add	r30, r30
 a00:	ff 1f       	adc	r31, r31
 a02:	00 24       	eor	r0, r0
 a04:	00 1c       	adc	r0, r0
 a06:	0b be       	out	0x3b, r0	; 59
 a08:	07 90       	elpm	r0, Z+
 a0a:	f6 91       	elpm	r31, Z
 a0c:	e0 2d       	mov	r30, r0
 a0e:	09 94       	ijmp

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>
